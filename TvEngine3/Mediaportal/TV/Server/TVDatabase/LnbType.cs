#region Copyright (C) 2005-2011 Team MediaPortal

// Copyright (C) 2005-2011 Team MediaPortal
// http://www.team-mediaportal.com
// 
// MediaPortal is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// MediaPortal is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with MediaPortal. If not, see <http://www.gnu.org/licenses/>.

#endregion

using System;
using Gentle.Framework;
using System.Collections.Generic;
using TvLibrary.Interfaces;

namespace TvDatabase
{
  /// <summary>
  /// Instances of this class represent the properties and methods of a row in the table <b>LnbType</b>.
  /// </summary>
  [TableName("LnbType"), Serializable]
  public class LnbType : Persistent, IComparable, ILnbType
  {
    #region Members

    private bool isChanged;
    [TableColumn("idLnbType", NotNull = true), PrimaryKey(AutoGenerated = true)]
    private int idLnbType;
    [TableColumn("name", NotNull = true)]
    private string name;
    [TableColumn("lowBandFrequency", NotNull = true)]
    private int lowBandFrequency;
    [TableColumn("highBandFrequency", NotNull = true)]
    private int highBandFrequency;
    [TableColumn("switchFrequency", NotNull = true)]
    private int switchFrequency;
    [TableColumn("isBandStacked")]
    private bool isBandStacked;
    [TableColumn("isToroidal")]
    private bool isToroidal;

    #endregion

    #region Constructors

    /// <summary> 
    /// Create a new object by specifying all fields (except the auto-generated primary key field). 
    /// </summary> 
    public LnbType(string name, int lowBandFrequency, int highBandFrequency, int switchFrequency,
                bool isBandStacked, bool isToroidal)
    {
      isChanged = true;
      this.name = name;
      this.lowBandFrequency = lowBandFrequency;
      this.highBandFrequency = highBandFrequency;
      this.switchFrequency = switchFrequency;
      this.isBandStacked = isBandStacked;
      this.isToroidal = isToroidal;
    }

    /// <summary> 
    /// Create an object from an existing row of data. This will be used by Gentle to 
    /// construct objects from retrieved rows.
    /// </summary> 
    public LnbType(int idLnbType, string name, int lowBandFrequency, int highBandFrequency, int switchFrequency,
                bool isBandStacked, bool isToroidal)
    {
      this.idLnbType = idLnbType;
      this.name = name;
      this.lowBandFrequency = lowBandFrequency;
      this.highBandFrequency = highBandFrequency;
      this.switchFrequency = switchFrequency;
      this.isBandStacked = isBandStacked;
      this.isToroidal = isToroidal;
    }

    #endregion

    #region Public Properties

    /// <summary>
    /// Indicates whether the entity is changed and requires saving or not.
    /// </summary>
    public bool IsChanged
    {
      get { return isChanged; }
    }

    /// <summary>
    /// Property relating to database column idLnbType
    /// </summary>
    public int IdLnbType
    {
      get { return idLnbType; }
    }

    /// <summary>
    /// Property relating to database column name
    /// </summary>
    public string Name
    {
      get { return name; }
      set
      {
        isChanged |= name != value;
        name = value;
      }
    }

    /// <summary>
    /// Property relating to database column lowBandFrequency
    /// </summary>
    public int LowBandFrequency
    {
      get { return lowBandFrequency; }
      set
      {
        isChanged |= lowBandFrequency != value;
        lowBandFrequency = value;
      }
    }

    /// <summary>
    /// Property relating to database column highBandFrequency
    /// </summary>
    public int HighBandFrequency
    {
      get { return highBandFrequency; }
      set
      {
        isChanged |= highBandFrequency != value;
        highBandFrequency = value;
      }
    }

    /// <summary>
    /// Property relating to database column switchFrequency
    /// </summary>
    public int SwitchFrequency
    {
      get { return switchFrequency; }
      set
      {
        isChanged |= switchFrequency != value;
        switchFrequency = value;
      }
    }

    /// <summary>
    /// Property relating to database column isBandStacked
    /// </summary>
    public bool IsBandStacked
    {
      get { return isBandStacked; }
      set
      {
        isChanged |= isBandStacked != value;
        isBandStacked = value;
      }
    }

    /// <summary>
    /// Property relating to database column isToroidal
    /// </summary>
    public bool IsToroidal
    {
      get { return isToroidal; }
      set
      {
        isChanged |= isToroidal != value;
        isToroidal = value;
      }
    }

    #endregion

    #region Storage and Retrieval

    /// <summary>
    /// Static method to retrieve all instances that are stored in the database in one call.
    /// The List is sorted by LNB type ID.
    /// </summary>
    public static IList<LnbType> ListAll()
    {
      List<LnbType> allLnbTypes = new List<LnbType>();
      Broker.RetrieveList<LnbType>(allLnbTypes);
      allLnbTypes.Sort(); // sort list by IComparable implementation, which takes care about priorities
      return allLnbTypes;
    }

    /// <summary>
    /// Retrieves an entity given it's id.
    /// </summary>
    public static LnbType Retrieve(int id)
    {
      // Return null if id is smaller than seed and/or increment for autokey
      if (id < 1)
      {
        return null;
      }
      Key key = new Key(typeof(LnbType), true, "idLnbType", id);
      return Broker.RetrieveInstance<LnbType>(key);
    }

    /// <summary>
    /// Retrieves an entity given it's id, using Gentle.Framework.Key class.
    /// This allows retrieval based on multi-column keys.
    /// </summary>
    public static LnbType Retrieve(Key key)
    {
      return Broker.RetrieveInstance<LnbType>(key);
    }

    /// <summary>
    /// Persists the entity if it was never persisted or was changed.
    /// </summary>
    public override void Persist()
    {
      if (IsChanged || !IsPersisted)
      {
        try
        {
          base.Persist();
        }
        catch (Exception ex)
        {
          TvLibrary.Log.Log.Error("Exception in LnbType.Persist() with Message {0}", ex.Message);
          return;
        }
        isChanged = false;
      }
    }

    #endregion

    public void Delete()
    {
      Remove();
    }

    #region object overrides

    /// <summary>
    /// Get a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
    /// </summary>
    /// <returns>
    /// a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>
    /// </returns>
    public override string ToString()
    {
      return name;
    }

    /// <summary>
    /// Determine whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
    /// </summary>
    /// <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
    /// <returns>
    /// <c>true</c> if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>, otherwise <c>false</c>
    /// </returns>
    public override bool Equals(object obj)
    {
      LnbType l = obj as LnbType;
      if (l == null)
      {
        return false;
      }
      if (l.idLnbType != idLnbType)
      {
        return false;
      }
      if (l.lowBandFrequency != lowBandFrequency)
      {
        return false;
      }
      if (l.highBandFrequency != highBandFrequency)
      {
        return false;
      }
      if (l.switchFrequency != switchFrequency)
      {
        return false;
      }
      if (l.isBandStacked != isBandStacked)
      {
        return false;
      }
      if (l.isToroidal != isToroidal)
      {
        return false;
      }
      return true;
    }

    /// <summary>
    /// Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
    /// </summary>
    /// <returns>a hash code for the current <see cref="T:System.Object"></see></returns>
    public override int GetHashCode()
    {
      return base.GetHashCode() ^ idLnbType.GetHashCode() ^ name.GetHashCode() ^ lowBandFrequency.GetHashCode() ^
              highBandFrequency.GetHashCode() ^ switchFrequency.GetHashCode() ^ isBandStacked.GetHashCode() ^
              isToroidal.GetHashCode();
    }

    #endregion

    #region IComparable Member

    /// <summary>
    /// Compare LNB types by their ID.
    /// </summary>
    /// <param name="obj">LNB type to compare with.</param>
    /// <returns>Result</returns>
    public int CompareTo(object obj)
    {
      if (obj == null)
      {
        return 1;
      }
      return idLnbType.CompareTo(((LnbType)obj).idLnbType);
    }

    #endregion

    #region ICloneable member

    /// <summary>
    /// Clone the LNB type instance.
    /// </summary>
    /// <returns>a shallow clone of the LNB type instance</returns>
    public object Clone()
    {
      return this.MemberwiseClone();
    }

    #endregion
  }
}